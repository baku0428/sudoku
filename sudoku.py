import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Reshape
from sklearn.model_selection import train_test_split

# üîπ 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏π‡πÇ‡∏î‡∏Å‡∏∏‡∏à‡∏≤‡∏Å CSV
df = pd.read_csv("sudoku.csv")

# ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
X = np.array([list(map(int, list(puzzle))) for puzzle in df["quizzes"]])
y = np.array([list(map(int, list(solution))) for solution in df["solutions"]])

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô train ‡πÅ‡∏•‡∏∞ test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
X_train = X_train.reshape(-1, 9, 9, 1)
X_test = X_test.reshape(-1, 9, 9, 1)

# üîπ 2. ‡πÅ‡∏õ‡∏•‡∏á y_train ‡πÅ‡∏•‡∏∞ y_test ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô One-Hot
num_classes = 10  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Sudoku ‡∏Ñ‡∏∑‡∏≠ 0-9
y_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes).reshape(-1, 9, 9, num_classes)
y_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes).reshape(-1, 9, 9, num_classes)

# üîπ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Deep Learning
model = Sequential([
    Flatten(input_shape=(9, 9, 1)),  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
    Dense(128, activation="relu"),
    Dense(256, activation="relu"),
    Dense(512, activation="relu"),
    Dense(9 * 9 * num_classes, activation="softmax"),  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á 81 ‡∏ä‡πà‡∏≠‡∏á (one-hot)
    Reshape((9, 9, num_classes))  # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 9x9x10
])

# üîπ 4. ‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# üîπ 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ã‡∏π‡πÇ‡∏î‡∏Å‡∏∏
def solve_sudoku(puzzle):
    puzzle = np.array([list(map(int, list(puzzle)))])
    puzzle = puzzle.reshape(-1, 9, 9, 1)
    prediction = model.predict(puzzle)
    return np.argmax(prediction, axis=-1).reshape(9, 9)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å one-hot ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

# üîπ 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤
test_puzzle = df["quizzes"][0]
solved_board = solve_sudoku(test_puzzle)
print("üîπ ‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤ Sudoku ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏Å‡πâ:\n", np.array(list(test_puzzle)).reshape(9, 9))
print("\n‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ:\n", solved_board)
